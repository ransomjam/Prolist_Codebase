Now build a simple Login system for the ProList React app.
Simulate login by storing a selected user in React state.

‚úÖ TASK 1: Add Login.jsx page
Create /src/pages/Login.jsx:

jsx
Copy
Edit
import { useState } from 'react';
import { currentUser } from '../demoData';
import { useNavigate } from 'react-router-dom';

export default function Login({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = (e) => {
    e.preventDefault();
    // Simulate match ‚Äî this is just demo logic
    if (username === currentUser.username && password === "1234") {
      onLogin(currentUser);
      navigate('/profile');
    } else {
      alert("Invalid login");
    }
  };

  return (
    <div className="p-6 max-w-sm mx-auto">
      <h2 className="text-3xl font-bold text-primary mb-4">üîê Login</h2>
      <form onSubmit={handleLogin} className="grid gap-4 bg-white p-6 rounded-xl shadow">
        <input value={username} onChange={e => setUsername(e.target.value)} placeholder="Username" className="border p-2 rounded" />
        <input type="password" value={password} onChange={e => setPassword(e.target.value)} placeholder="Password" className="border p-2 rounded" />
        <button type="submit" className="bg-emerald text-white px-4 py-2 rounded-lg shadow-neonBlue">Login</button>
      </form>
    </div>
  );
}
‚úÖ TASK 2: Add userSession in App.jsx
In App.jsx:

jsx
Copy
Edit
import { useState } from 'react';
import Login from './pages/Login';

function App() {
  const [userSession, setUserSession] = useState(null);

  return (
    <Router>
      <div className="flex">
        <Sidebar />
        <div className="flex-1">
          <Navbar user={userSession} />
          <Routes>
            <Route path="/login" element={<Login onLogin={setUserSession} />} />
            <Route path="/profile" element={userSession ? <Profile /> : <Login onLogin={setUserSession} />} />
            ...
          </Routes>
        </div>
      </div>
    </Router>
  );
}
export default App;
‚úÖ TASK 3: Update Navbar to Show Login or Profile
In Navbar.jsx, update the top-right dropdown logic:

jsx
Copy
Edit
export default function Navbar({ user }) {
  ...
  return (
    ...
    <div className="relative">
      <button onClick={() => setIsOpen(!isOpen)} className="bg-primary text-white px-4 py-2 rounded-lg shadow-neonBlue">
        {user ? user.username : "Menu ‚ñº"}
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-xl z-20">
          {user ? (
            <>
              <a href="/profile" className="block px-4 py-2 hover:bg-gray-100">My Profile</a>
              <a href="/" className="block px-4 py-2 hover:bg-gray-100">Logout</a>
            </>
          ) : (
            <a href="/login" className="block px-4 py-2 hover:bg-gray-100">Login</a>
          )}
        </div>
      )}
    </div>
  );
}